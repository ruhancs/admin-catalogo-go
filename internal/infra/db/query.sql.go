// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (id,name,description,is_active,created_at) VALUES ($1,$2,$3,$4,$5)
`

type CreateCategoryParams struct {
	ID          string
	Name        string
	Description sql.NullString
	IsActive    bool
	CreatedAt   time.Time
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.CreatedAt,
	)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, description, is_active, created_at FROM categories WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getVideoByCategoryId = `-- name: GetVideoByCategoryId :many
SELECT id, title, description, duration, year_launched, is_published, banner_url, video_url, categories_id, created_at FROM videos WHERE categories_id @> ARRAY[$1]
`

func (q *Queries) GetVideoByCategoryId(ctx context.Context, categoriesID []string) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getVideoByCategoryId, pq.Array(categoriesID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.YearLaunched,
			&i.IsPublished,
			&i.BannerUrl,
			&i.VideoUrl,
			pq.Array(&i.CategoriesID),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoById = `-- name: GetVideoById :one
SELECT id, title, description, duration, year_launched, is_published, banner_url, video_url, categories_id, created_at FROM videos WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVideoById(ctx context.Context, id string) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoById, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.YearLaunched,
		&i.IsPublished,
		&i.BannerUrl,
		&i.VideoUrl,
		pq.Array(&i.CategoriesID),
		&i.CreatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description, is_active, created_at FROM categories ORDER BY name LIMIT $1 OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVideos = `-- name: ListVideos :many
SELECT id, title, description, duration, year_launched, is_published, banner_url, video_url, categories_id, created_at FROM videos ORDER BY title LIMIT $1 OFFSET $2
`

type ListVideosParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListVideos(ctx context.Context, arg ListVideosParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, listVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.YearLaunched,
			&i.IsPublished,
			&i.BannerUrl,
			&i.VideoUrl,
			pq.Array(&i.CategoriesID),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerVideo = `-- name: RegisterVideo :exec
INSERT INTO videos (id,title,description,duration,year_launched,is_published,banner_url,video_url,categories_id,created_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type RegisterVideoParams struct {
	ID           string
	Title        string
	Description  sql.NullString
	Duration     sql.NullInt64
	YearLaunched int64
	IsPublished  bool
	BannerUrl    sql.NullString
	VideoUrl     sql.NullString
	CategoriesID []string
	CreatedAt    time.Time
}

func (q *Queries) RegisterVideo(ctx context.Context, arg RegisterVideoParams) error {
	_, err := q.db.ExecContext(ctx, registerVideo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Duration,
		arg.YearLaunched,
		arg.IsPublished,
		arg.BannerUrl,
		arg.VideoUrl,
		pq.Array(arg.CategoriesID),
		arg.CreatedAt,
	)
	return err
}

const updateVideoFiles = `-- name: UpdateVideoFiles :one
UPDATE videos SET video_url = $2, banner_url = $3 WHERE id = $1 RETURNING id, title, description, duration, year_launched, is_published, banner_url, video_url, categories_id, created_at
`

type UpdateVideoFilesParams struct {
	ID        string
	VideoUrl  sql.NullString
	BannerUrl sql.NullString
}

func (q *Queries) UpdateVideoFiles(ctx context.Context, arg UpdateVideoFilesParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, updateVideoFiles, arg.ID, arg.VideoUrl, arg.BannerUrl)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.YearLaunched,
		&i.IsPublished,
		&i.BannerUrl,
		&i.VideoUrl,
		pq.Array(&i.CategoriesID),
		&i.CreatedAt,
	)
	return i, err
}

const updateVideoIsPublished = `-- name: UpdateVideoIsPublished :one
UPDATE videos SET is_published = $2 WHERE id = $1 RETURNING id, title, description, duration, year_launched, is_published, banner_url, video_url, categories_id, created_at
`

type UpdateVideoIsPublishedParams struct {
	ID          string
	IsPublished bool
}

func (q *Queries) UpdateVideoIsPublished(ctx context.Context, arg UpdateVideoIsPublishedParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, updateVideoIsPublished, arg.ID, arg.IsPublished)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.YearLaunched,
		&i.IsPublished,
		&i.BannerUrl,
		&i.VideoUrl,
		pq.Array(&i.CategoriesID),
		&i.CreatedAt,
	)
	return i, err
}
